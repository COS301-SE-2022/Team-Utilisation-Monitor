// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person{
  id Int @id @default(autoincrement())
  name String
  surname String
  email String @unique
  role Role @default(USER)
  suspended Boolean @default(false)
  approved Boolean @default(false)

  admin Company? @relation(name: "setOfAdmins",fields: [admin_id],references: [id], onDelete: Cascade, onUpdate: Cascade)
  admin_id Int?

  company Company? @relation(name:"worksFor",fields: [company_id],references: [id], onDelete: Cascade, onUpdate: Cascade)
  company_id Int?

  project Project? @relation(name: "workOn",fields: [project_id],references: [id], onDelete: Cascade, onUpdate: Cascade)
  project_id Int?

  teams PersonOnTeams []

  skills PersonOnSkills [] //one person can have many skills

  positions PersonsOnPositions []

  weekly_hours Float @default(0)

  assigned_hours Float @default(0)

  utilisation Float @default(0)

  status Status @default(UNDER_UTILISED)

  Project_Points Float? @default(0)

  active_Token String? @default("null")//value is set whenever the user logs in

  utilisations HistoricUtilisation [] @relation("utility")

  @@map("person")

}

model PersonOnSkills{

  id Int @default(autoincrement()) //this is the skill ID.

  person Person @relation(fields: [person_id],references: [id], onDelete: Cascade, onUpdate: Cascade) //person having the skill
  person_id Int

  skill Skills @relation(fields: [skill_id],references: [id], onDelete: Cascade, onUpdate: Cascade) //skill held by person
  skill_id Int

  @@id([person_id,skill_id])

}

model Skills{

  id Int @id @default(autoincrement())
  skill String @unique

  people PersonOnSkills [] //multiple people can hold one skill
  projects SkillsOnProjects[]  //Multiple projects can hold the same skill
  teams SkillsOnTeams[] //Multiple teams can hold multiple skills

  @@map("skills")
}


model Company{

  id Int @id @default(autoincrement())

  company_name String @unique

  employees Person[] @relation("worksFor")

  projects Project[] @relation("ownsA")

  teams Team[] @relation("memberOf")

  admins Person[] @relation("setOfAdmins")

  invite Invites?

  @@map("company")
}


model Invites{

  id Int @id @default(autoincrement())

  invite_code String? @unique

  company Company? @relation(fields: [company_id],references: [id], onDelete: Cascade, onUpdate: Cascade)
  company_id Int? @unique

  created DateTime? @default(now())

  expire DateTime //2023-01-01T03:53:00.000Z

  @@map("invites")
}

model PersonsOnPositions{

  id Int @id @default(autoincrement())

  person Person @relation(fields: [person_id], references: [id],onDelete: Cascade,onUpdate: Cascade)
  person_id Int

  position Position @relation(fields: [position_id],references: [id],onDelete: Cascade,onUpdate: Cascade)
  position_id Int
}

model Position{
  id Int @id @default(autoincrement())
  
  title String @default("newbie") @unique

  people PersonsOnPositions[]

  @@map("position")
}

model PersonOnTeams{

  id Int @id @default(autoincrement())

  teams Team @relation(fields: [team_id],references: [id])
  team_id Int //A person can hold multiple teams

  members Person @relation(fields: [person_id],references: [id])
  person_id Int

}

model Team{

  id Int @id @default(autoincrement())

  team_name String @unique

  members PersonOnTeams[]

  company Company? @relation(name: "memberOf",fields: [company_id],references: [id], onDelete: Cascade, onUpdate: Cascade)
  company_id Int?  //company owns muliple teams

  projects TeamsOnProjects []

  utilisation Float @default(0)
  skills SkillsOnTeams[] //Multiple skills on one team

  @@map("team")
}

model TeamsOnProjects{

  id Int @id @default(autoincrement())

  team Team @relation(fields: [team_id],references: [id])
  team_id Int

  project Project @relation(fields: [project_id],references: [id])
  project_id Int

  TeamHours Float @default(0)

}

//a project can be worked on mutliple users
//or a project can have many peoples.

model Project{

  id Int @id @default(autoincrement())

  project_name String @unique

  owners Company? @relation(name: "ownsA",fields: [owner_id],references: [id], onDelete: Cascade, onUpdate: Cascade)
  owner_id Int? //the company that owns the preoject

  workers Person[] @relation("workOn")

  teams TeamsOnProjects []
  skills SkillsOnProjects[]  //A project can hold many skills

  man_hours Int @default(0)

  completed Boolean @default(false)

  @@map("project")
}

model SkillsOnProjects{

  id Int @id @default(autoincrement())

  skill Skills @relation(fields: [skill_id],references: [id])
  skill_id Int

  project Project @relation(fields: [project_id],references: [id])
  project_id Int
}

model SkillsOnTeams{

  id Int @id @default(autoincrement())

  skill Skills @relation(fields: [skill_id],references: [id])
  skill_id Int

  team Team @relation(fields: [team_id],references: [id])
  team_id Int

}


model HistoricUtilisation{

  id Int @id @default(autoincrement())

  week1 Float @default(0)

  week2 Float @default(0)

  week3 Float @default(0)

  week4 Float @default(0)

  monthy_avg Float @default(0)

  month Month?

  person Person @relation(name: "utility",fields: [person_id],references: [id])
  person_id Int

  @@map("historic_utilisation")

}

//the same skills can be owned by multiple people


enum Role{
  ADMIN
  USER
}

enum Status{
  //for WeeklyUtilisation
  UNDER_UTILISED
  FAIRLY_UTILISED
  HEAVILY_UTILISED
  FULLY_UTILISED
  OVER_UTILISED


  //For Project
  ACTIVE
  INACTIVE
}

enum Month{
  JAN
  FEB
  MAR
  APR
  MAY
  JUN
  JUL
  AUG
  SEP
  OCT
  NOV
  DEC
}

