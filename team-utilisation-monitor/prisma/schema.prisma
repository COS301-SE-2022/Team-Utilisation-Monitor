// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person{
  id Int @id @default(autoincrement())
  name String
  surname String
  email String @unique
  role Role @default(USER)
  suspended Boolean @default(false)
  approved Boolean @default(false)

  position Position?

  admin Company? @relation(name: "setOfAdmins",fields: [admin_id],references: [id])
  admin_id Int?

  company Company? @relation(name:"worksFor",fields: [company_id],references: [id])
  company_id Int?

  project Project? @relation(name: "workOn",fields: [project_id],references: [id])
  project_id Int?

  team Team? @relation(name: "partOf",fields: [team_id],references: [id])
  team_id Int?

  skills PersonOnSkills [] //one person can have many skills

  weekly_hours Float
  assigned_hours Float
  utilisation Int @default(0)
  status Status
  utilisations HistoricUtilisation [] @relation("utility")

  @@map("person")

}

model PersonOnSkills{

  id Int @default(autoincrement()) //this is the skill ID.

  person Person @relation(fields: [person_id],references: [id]) //person having the skill
  person_id Int

  skill Skills @relation(fields: [skill_id],references: [id]) //skill held by person
  skill_id Int

  @@id([person_id,skill_id])

}

model Skills{

  id Int @id @default(autoincrement())
  skill String @unique

  people PersonOnSkills [] //multiple people can hold one skill

  @@map("skills")
}



model Team{

  id Int @id @default(autoincrement())

  team_name String @unique

  members Person[] @relation("partOf")

  company Company? @relation(name: "memberOf",fields: [company_id],references: [id])

  company_id Int?

  project Project?

  @@map("team")
}

model Company{

  id Int @id @default(autoincrement())

  company_name String @unique

  employees Person[] @relation("worksFor")

  projects Project[] @relation("ownsA")

  teams Team[] @relation("memberOf")

  admins Person[] @relation("setOfAdmins")

  invite Invites?

  @@map("company")
}


model Invites{

  id Int @id @default(autoincrement())

  invite_code String? @unique

  company Company? @relation(fields: [company_id],references: [id])
  company_id Int? @unique

  created DateTime? @default(now())

  expire DateTime //2023-01-01T03:53:00.000Z

  @@map("invites")
}

model Position{
  id Int @id @default(autoincrement())
  title String @default("newbie")

  person Person? @relation(fields: [person_id],references: [id])
  person_id Int? @unique

  @@map("position")
}

//a project can be worked on mutliple users
//or a project can have many peoples.

model Project{

  id Int @id @default(autoincrement())

  project_name String

  owners Company? @relation(name: "ownsA",fields: [owner_id],references: [id])

  owner_id Int? //the company that owns the preoject

  workers Person[] @relation("workOn")

  team Team? @relation(fields: [team_id],references: [id])
  team_id Int? @unique

  man_hours Int? @default(0)

  completed Boolean @default(false)

  @@map("project")
}

model HistoricUtilisation{

  id Int @id @default(autoincrement())

  week1 Float @default(0) //2023-01-01T03:53:00.000Z
  week2 Float @default(0) //2023-01-01T03:53:00.000Z
  week3 Float @default(0) //2023-01-01T03:53:00.000Z
  week4 Float @default(0) //2023-01-01T03:53:00.000Z
  MonthlyAvg Float @default(0)

  month String

  person Person @relation(name: "utility",fields: [person_id],references: [id])
  person_id Int

  @@map("historic_utilisation")

}

//the same skills can be owned by multiple people


enum Role{
  ADMIN
  USER
}

enum Status{
  //for WeeklyUtilisation
  UNDER_UTILISED
  FAIRLY_UTILISED
  HEAVILY_UTILISED
  OVER_UTILISED

  //For Project
  ACTIVE //
  INACTIVE
}


//flow model: A company has to be created; Then a project created, then employees
//who work on it
