// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person{
  id Int @id @default(autoincrement())
  name String 
  surname String
  email String @unique
  password String @default("password")
  role Role? @default(USER)
  suspended Boolean @default(false)
  utilisation Int @default(0)
  
  position Position? 

  admin Admins? @relation(name: "personWhoIsAdmin",fields: [admin_id],references: [id])
  admin_id Int?

  company Company? @relation(name:"worksFor",fields: [company_id],references: [id])
  company_id Int? 

  project Project? @relation(name: "workOn",fields: [project_id],references: [id])
  project_id Int?

  team Team? @relation(name: "partOf",fields: [team_id],references: [id])
  team_id Int?

  skills Skills[]
  
  
  @@map("person")

}

model Team{

  id Int @id @default(autoincrement())
  team_name String @default("New Team")

  members Person[] @relation("partOf")

  company Company? @relation(name: "memberOf",fields: [company_id],references: [id])
  company_id Int?

  project Project?

  @@map("team")
}

model Company{
  id Int @id @default(autoincrement())
  company_name String @unique

  employees Person[] @relation("worksFor")

  projects Project[] @relation("ownsA")

  teams Team[] @relation("memberOf") 

  admins Admins[] @relation("setOfAdmins")

  invite Invites?

  @@map("company")
}

model Invites{

  id Int @id @default(autoincrement())

  invite_code String? @unique

  company Company? @relation(fields: [company_id],references: [id])
  company_id Int?

  created DateTime

  expire DateTime

  @@map("invites")
}

model Admins{

  id Int @id @default(autoincrement())

  person Person[]  @relation("personWhoIsAdmin")//A single entry is associated with multiple admins

  company Company? @relation(name: "setOfAdmins",fields: [company_id],references: [id])
  company_id Int?

  @@map("admins")
}

model Position{
  id Int @id @default(autoincrement())
  title String 

  person Person? @relation(fields: [person_id],references: [id])
  person_id Int?

  @@map("position")
}

//a project can be worked on mutliple users
//or a project can have many peoples.

model Project{
  id Int @id @default(autoincrement())
  project_name String

  owners Company? @relation(name: "ownsA",fields: [owner_id],references: [id])
  owner_id Int? //the company that owns the preoject

  workers Person[] @relation("workOn")

  team Team? @relation(fields: [team_id],references: [id])
  team_id Int?
  

  @@map("project")
}

//the same skills can be owned by multiple people

model Skills{

  id Int @id @default(autoincrement())
  skill_type String

  person Person @relation(fields: [person_id],references: [id])
  person_id Int

  @@map("skills")
}


enum Role{
  ADMIN
  USER
}

//flow model: A company has to be created; Then a project created, then employees 
//who work on it




